{"ast":null,"code":"var _jsxFileName = \"/media/carlos/3214e379-0014-484c-91e7-70c00c896cdd/senior_project/webAppStuff/my-app/src/components/Home.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Home() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"row align-items-center my-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-lg-1\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            class: \"img-fluid rounded mb-4 mb-lg-0\",\n            src: \"http://placehold.it/900x400\",\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 10,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-lg-10\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            class: \"font-weight-light\",\n            children: \"Introduction\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"The purpose of this project is to have several playable versions of MCTS(Monte Carlo Tree Search) implementations for the Star Wars Pazaak card game as well as information pertaining to the adversarial matchups between the A.I.\\u2019s. The intended audience for this project is for those looking to find more information on MCTS A.I. implementation strategies as well as for fans of the classic card game.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"This project comes with a simple, \\u2018if-else\\u2019 A.I. that is used as a baseline for the adversarial matchups between all other A.I.\\u2019s, a classic MCTS implementation, an MCTS implementation without using a UCB(Upper Confidence Bound) for the Selection process, as well as an Open-Loop MCTS implementation.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"The A.I.\\u2019s within this project all have playable versions wherein a human player is able to play against said A.I. (Human vs Simple A.I., Human vs MCTS A.I., etc.). These playable versions were all created in Python with the help of Pygame for the U.I. portions. All artwork in the game was drawn by me (the author) on my personal iPad using \\u2018blah blah blah\\u2019 , an app available for iOS devices.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"These agents all have their own advantages and disadvantages when it comes to their implementation strategies and thus this project seeks to make observations based on how the A.I. 's fare against each other.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n            src: \"https://docs.google.com/document/d/e/2PACX-1vSQNqtJfC7sw5c_G4A7Epmm3eLIicW8TNyPuCJSUuZQBxa7qWsoY66zIKTq7LCmZi__7S9R5z_pCMfQ/pub?embedded=true\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/media/carlos/3214e379-0014-484c-91e7-70c00c896cdd/senior_project/webAppStuff/my-app/src/components/Home.jsx"],"names":["React","Home"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,IAAT,GAAgB;AACd,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BAEE;AAAK,MAAA,KAAK,EAAC,WAAX;AAAA,6BACE;AAAK,QAAA,KAAK,EAAC,6BAAX;AAAA,gCACE;AAAK,UAAA,KAAK,EAAC,UAAX;AAAA,iCACE;AACE,YAAA,KAAK,EAAC,gCADR;AAEE,YAAA,GAAG,EAAC,6BAFN;AAGE,YAAA,GAAG,EAAC;AAHN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AAAK,UAAA,KAAK,EAAC,WAAX;AAAA,kCACE;AAAI,YAAA,KAAK,EAAC,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXF,eAeE;AAAQ,YAAA,GAAG,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,kBAfF;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD;;KAnCQA,I;AAqCT,eAAeA,IAAf","sourcesContent":["import React from \"react\";\n\nfunction Home() {\n  return (\n    <div className=\"home\">\n\n      <div class=\"container\">\n        <div class=\"row align-items-center my-5\">\n          <div class=\"col-lg-1\">\n            <img\n              class=\"img-fluid rounded mb-4 mb-lg-0\"\n              src=\"http://placehold.it/900x400\"\n              alt=\"\"\n            />\n          </div>\n          <div class=\"col-lg-10\">\n            <h1 class=\"font-weight-light\">Introduction</h1>\n            <p>\n                The purpose of this project is to have several playable versions of MCTS(Monte Carlo Tree Search) implementations for the Star Wars Pazaak card game as well as information pertaining to the adversarial matchups between the A.I.’s. The intended audience for this project is for those looking to find more information on MCTS A.I. implementation strategies as well as for fans of the classic card game. \n            </p>\n            <p>\n                This project comes with a simple, ‘if-else’ A.I. that is used as a baseline for the adversarial matchups between all other A.I.’s, a classic MCTS implementation, an MCTS implementation without using a UCB(Upper Confidence Bound) for the Selection process, as well as an Open-Loop MCTS implementation. \n            </p>\n            <p>\n                The A.I.’s within this project all have playable versions wherein a human player is able to play against said A.I. (Human vs Simple A.I., Human vs MCTS A.I., etc.). These playable versions were all created in Python with the help of Pygame for the U.I. portions. All artwork in the game was drawn by me (the author) on my personal iPad using ‘blah blah blah’ , an app available for iOS devices. \n            </p>\n            <p>\n                These agents all have their own advantages and disadvantages when it comes to their implementation strategies and thus this project seeks to make observations based on how the A.I. 's fare against each other. \n\n            </p>\n            <iframe src=\"https://docs.google.com/document/d/e/2PACX-1vSQNqtJfC7sw5c_G4A7Epmm3eLIicW8TNyPuCJSUuZQBxa7qWsoY66zIKTq7LCmZi__7S9R5z_pCMfQ/pub?embedded=true\"></iframe>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}